"use strict";(self.webpackChunknextradocs=self.webpackChunknextradocs||[]).push([[411],{8421:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>d,toc:()=>c});var s=r(4848),i=r(8453);const t={sidebar_position:4},a="Writing Database Queries",d={id:"tutorials/database/queries",title:"Writing Database Queries",description:"This guide covers common query patterns using Drizzle ORM. For comprehensive documentation, see the Drizzle ORM Query Guide.",source:"@site/docs/tutorials/database/queries.mdx",sourceDirName:"tutorials/database",slug:"/tutorials/database/queries",permalink:"/docs/tutorials/database/queries",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Creating Database Tables",permalink:"/docs/tutorials/database/schema"},next:{title:"Stripe",permalink:"/docs/tutorials/stripe"}},l={},c=[{value:"Basic Queries",id:"basic-queries",level:2},{value:"Inserting Data",id:"inserting-data",level:2},{value:"Updating Records",id:"updating-records",level:2},{value:"Deleting Records",id:"deleting-records",level:2},{value:"Relations and Joins",id:"relations-and-joins",level:2},{value:"Complex Queries",id:"complex-queries",level:2},{value:"Best Practices",id:"best-practices",level:2}];function o(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"writing-database-queries",children:"Writing Database Queries"}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["This guide covers common query patterns using Drizzle ORM. For comprehensive documentation, see the ",(0,s.jsx)(n.a,{href:"https://orm.drizzle.team/docs/select",children:"Drizzle ORM Query Guide"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"basic-queries",children:"Basic Queries"}),"\n",(0,s.jsxs)(n.p,{children:["Queries are centralized in ",(0,s.jsx)(n.code,{children:"src/server/db/queries.ts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { db } from ".";\nimport { eq, and, like } from "drizzle-orm";\nimport { users } from "./schema";\n\n// Find by ID\nexport const getUserById = async (id: string) => {\n    return await db.query.users.findFirst({\n        where: eq(users.id, id),\n    });\n};\n\n// Find with conditions\nexport const findUsers = async (query: string) => {\n    return await db.query.users.findMany({\n        where: like(users.name, `%${query}%`),\n        columns: {\n            id: true,\n            name: true,\n            email: true,\n        },\n    });\n};\n'})}),"\n",(0,s.jsx)(n.h2,{id:"inserting-data",children:"Inserting Data"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Single insert\nexport const createUser = async (data: NewUser) => {\n    return await db.insert(users)\n        .values(data)\n        .returning();\n};\n\n// Batch insert\nexport const createManyUsers = async (data: NewUser[]) => {\n    return await db.insert(users)\n        .values(data)\n        .returning();\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"updating-records",children:"Updating Records"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Update by ID\nexport const updateUser = async (id: string, data: Partial<User>) => {\n    return await db.update(users)\n        .set(data)\n        .where(eq(users.id, id))\n        .returning();\n};\n\n// Conditional update\nexport const verifyEmail = async (email: string) => {\n    return await db.update(users)\n        .set({ emailVerified: true })\n        .where(eq(users.email, email))\n        .returning();\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"deleting-records",children:"Deleting Records"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Delete by ID\nexport const deleteUser = async (id: string) => {\n    return await db.delete(users)\n        .where(eq(users.id, id))\n        .returning();\n};\n\n// Conditional delete\nexport const deleteInactiveUsers = async () => {\n    return await db.delete(users)\n        .where(eq(users.emailVerified, false))\n        .returning();\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"relations-and-joins",children:"Relations and Joins"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Get user with related data\nexport const getUserWithSessions = async (id: string) => {\n    return await db.query.users.findFirst({\n        where: eq(users.id, id),\n        with: {\n            sessions: true,\n            accounts: true,\n        },\n    });\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"complex-queries",children:"Complex Queries"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Advanced filtering\nexport const findActiveUsers = async () => {\n    return await db.query.users.findMany({\n        where: and(\n            eq(users.emailVerified, true),\n            eq(users.twoFactorEnabled, false)\n        ),\n        orderBy: (users, { desc }) => [desc(users.createdAt)],\n        limit: 10,\n    });\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Centralize Queries"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Keep queries in ",(0,s.jsx)(n.code,{children:"queries.ts"})]}),"\n",(0,s.jsx)(n.li,{children:"Group related queries together"}),"\n",(0,s.jsx)(n.li,{children:"Export typed results"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Type Safety"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use Drizzle's type inference"}),"\n",(0,s.jsx)(n.li,{children:"Define return types for complex queries"}),"\n",(0,s.jsx)(n.li,{children:"Validate input data"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Performance"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Select only needed columns"}),"\n",(0,s.jsx)(n.li,{children:"Use appropriate indexes"}),"\n",(0,s.jsx)(n.li,{children:"Limit result sets when possible"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.admonition,{title:"Query Organization",type:"tip",children:[(0,s.jsx)(n.p,{children:"For larger applications, consider organizing queries by domain:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/server/db/queries/users.ts\nexport const userQueries = {\n    getById: async (id: string) => {...},\n    create: async (data: NewUser) => {...},\n    update: async (id: string, data: Partial<User>) => {...},\n};\n"})})]}),"\n",(0,s.jsxs)(n.admonition,{type:"warning",children:[(0,s.jsx)(n.p,{children:"Remember to:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Handle database errors appropriately"}),"\n",(0,s.jsx)(n.li,{children:"Validate input data before queries"}),"\n",(0,s.jsx)(n.li,{children:"Use transactions for related operations"}),"\n"]})]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>d});var s=r(6540);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);