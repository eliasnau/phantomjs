"use strict";(self.webpackChunknextradocs=self.webpackChunknextradocs||[]).push([[206],{4179:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var i=s(4848),t=s(8453);const r={sidebar_position:7},o="Session Management",a={id:"tutorials/authentication/sessions",title:"Session Management",description:"This guide explains how to work with authentication sessions in your application, both on the client and server side.",source:"@site/docs/tutorials/authentication/sessions.mdx",sourceDirName:"tutorials/authentication",slug:"/tutorials/authentication/sessions",permalink:"/docs/tutorials/authentication/sessions",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Two-Factor Authentication",permalink:"/docs/tutorials/authentication/2fa"},next:{title:"Emails",permalink:"/docs/category/emails"}},c={},d=[{value:"Client-Side Sessions",id:"client-side-sessions",level:2},{value:"Getting Session Data",id:"getting-session-data",level:3},{value:"1. React Hook",id:"1-react-hook",level:4},{value:"2. Direct Session Access",id:"2-direct-session-access",level:4},{value:"Session Updates",id:"session-updates",level:3},{value:"Server-Side Sessions",id:"server-side-sessions",level:2},{value:"Middleware Protection",id:"middleware-protection",level:3},{value:"Route Handlers",id:"route-handlers",level:3},{value:"Server Actions",id:"server-actions",level:3},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Custom Session Validation",id:"custom-session-validation",level:3},{value:"Session Management",id:"session-management-1",level:3},{value:"Type Safety",id:"type-safety",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Session Configuration",id:"session-configuration",level:3},{value:"Error Handling",id:"error-handling",level:3}];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"session-management",children:"Session Management"}),"\n",(0,i.jsx)(n.p,{children:"This guide explains how to work with authentication sessions in your application, both on the client and server side."}),"\n",(0,i.jsx)(n.h2,{id:"client-side-sessions",children:"Client-Side Sessions"}),"\n",(0,i.jsx)(n.h3,{id:"getting-session-data",children:"Getting Session Data"}),"\n",(0,i.jsx)(n.p,{children:"There are multiple ways to access the session on the client side:"}),"\n",(0,i.jsx)(n.h4,{id:"1-react-hook",children:"1. React Hook"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { useSession } from "better-auth/react";\n\nfunction MyComponent() {\n    const session = useSession();\n\n    if (!session) {\n        return <div>Not authenticated</div>;\n    }\n\n    return <div>Welcome, {session.user.name}</div>;\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"2-direct-session-access",children:"2. Direct Session Access"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { getSession } from "better-auth/client";\n\nasync function checkSession() {\n    const session = await getSession();\n    \n    if (session) {\n        // Access session data\n        const { user, expires } = session;\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"session-updates",children:"Session Updates"}),"\n",(0,i.jsx)(n.p,{children:"Listen for session changes in your components:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { useSessionUpdate } from "better-auth/react";\n\nfunction SessionListener() {\n    useSessionUpdate((newSession) => {\n        if (newSession) {\n            // Session created or updated\n        } else {\n            // Session expired or user signed out\n        }\n    });\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"server-side-sessions",children:"Server-Side Sessions"}),"\n",(0,i.jsx)(n.h3,{id:"middleware-protection",children:"Middleware Protection"}),"\n",(0,i.jsxs)(n.p,{children:["Protect your API routes in ",(0,i.jsx)(n.code,{children:"src/middleware.ts"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { withAuth } from "better-auth/middleware";\n\nexport default withAuth({\n    // Paths that require authentication\n    protected: ["/api/protected/:path*"],\n    // Public paths\n    public: ["/api/public/:path*"],\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"route-handlers",children:"Route Handlers"}),"\n",(0,i.jsx)(n.p,{children:"Access session in your API routes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { getServerSession } from "better-auth/next";\n\n// Server Component\nasync function ProtectedComponent() {\n    const session = await getServerSession();\n    \n    if (!session) {\n        redirect("/login");\n    }\n    \n    return <div>Protected Content for {session.user.email}</div>;\n}\n\n// API Route\nexport async function GET(request: Request) {\n    const session = await getServerSession();\n    \n    if (!session) {\n        return new Response("Unauthorized", { status: 401 });\n    }\n    \n    // Access session data\n    const { user, expires } = session;\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"server-actions",children:"Server Actions"}),"\n",(0,i.jsx)(n.p,{children:"Use sessions in server actions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'"use server";\n\nimport { getServerSession } from "better-auth/next";\n\nexport async function protectedAction() {\n    const session = await getServerSession();\n    \n    if (!session) {\n        throw new Error("Unauthorized");\n    }\n    \n    // Perform authenticated action\n    return { userId: session.user.id };\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,i.jsx)(n.h3,{id:"custom-session-validation",children:"Custom Session Validation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { validateSession } from "better-auth/server";\n\nasync function customSessionCheck() {\n    const result = await validateSession({\n        requireVerified: true,\n        allowExpired: false,\n    });\n    \n    return result.valid;\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"session-management-1",children:"Session Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { authClient } from "better-auth/client";\n\n// Sign out from current device\nasync function signOut() {\n    await authClient.signOut();\n}\n\n// Sign out from all devices\nasync function signOutAll() {\n    await authClient.signOutAll();\n}\n\n// Refresh session\nasync function refreshSession() {\n    await authClient.refreshSession();\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"type-safety",children:"Type Safety"}),"\n",(0,i.jsx)(n.p,{children:"Use TypeScript types for session data:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import type { Session, User } from \"better-auth/types\";\n\n// Custom user type\ninterface CustomUser extends User {\n    role: string;\n    preferences: {\n        theme: 'light' | 'dark';\n    };\n}\n\n// Use with hooks\nconst session = useSession<CustomUser>();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,i.jsx)(n.h3,{id:"session-configuration",children:"Session Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["Configure session behavior in ",(0,i.jsx)(n.code,{children:"src/lib/auth.ts"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'export const auth = betterAuth({\n    session: {\n        strategy: "jwt",\n        maxAge: 30 * 24 * 60 * 60, // 30 days\n        updateAge: 24 * 60 * 60, // 24 hours\n        rememberMe: true,\n    },\n    security: {\n        csrfProtection: true,\n        requireSecureCookie: process.env.NODE_ENV === "production",\n    }\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'try {\n    const session = await getServerSession();\n} catch (error) {\n    if (error.code === "SESSION_EXPIRED") {\n        // Handle expired session\n    } else if (error.code === "INVALID_TOKEN") {\n        // Handle invalid session token\n    }\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"Best Practices",type:"tip",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Always verify sessions on sensitive operations"}),"\n",(0,i.jsx)(n.li,{children:"Use appropriate session timeouts"}),"\n",(0,i.jsx)(n.li,{children:"Implement proper error handling"}),"\n",(0,i.jsx)(n.li,{children:"Consider implementing session refresh strategies"}),"\n"]})}),"\n",(0,i.jsx)(n.admonition,{title:"Security Note",type:"warning",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Never store sensitive information in the session"}),"\n",(0,i.jsx)(n.li,{children:"Always validate sessions server-side"}),"\n",(0,i.jsx)(n.li,{children:"Use HTTPS in production"}),"\n",(0,i.jsx)(n.li,{children:"Implement proper CSRF protection"}),"\n"]})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var i=s(6540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);